// This is your Prisma schema file for Vercel deployment
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(PATIENT)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  appointments      Appointment[]
  memberships       Membership[]
  medicalHistory    MedicalHistory[]
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  notifications     Notification[]

  @@map("users")
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  time        String
  duration    Int      @default(30)
  status      Status   @default(SCHEDULED)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patientId String
  patient   User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  doctorId String
  doctor   User   @relation("DoctorAppointments", fields: [doctorId], references: [id])

  @@map("appointments")
}

model Membership {
  id        String      @id @default(cuid())
  type      MembershipType @default(BASIC)
  status    String      @default(ACTIVE)
  startDate DateTime    @default(now())
  endDate   DateTime?
  price     Float?
  benefits  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model MedicalHistory {
  id          String   @id @default(cuid())
  diagnosis   String
  treatment   String
  notes       String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patientId String
  patient   User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_history")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TimeSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String
  endTime   String
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("time_slots")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MembershipType {
  BASIC
  PREMIUM
  VIP
}

enum NotificationType {
  INFO
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLED
  MEMBERSHIP_EXPIRED
  PAYMENT_DUE
}